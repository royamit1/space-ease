// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  previewFeatures = ["relationJoins"]
}

model ParkingSpot {
  id           Int            @id @default(autoincrement())
  userId       String
  latitude     Float
  longitude    Float
  address      String
  description  String
  hourlyRate   Float
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ParkingImage ParkingImage[]
  ActiveRent   ActiveRent[]
  @@index([startTime, endTime])
  @@index([hourlyRate])
  @@index([userId])
  @@index([latitude, longitude])
}

model ParkingImage {
  id            Int         @id @default(autoincrement())
  parkingSpotId Int
  url           String // URL of the image
  createdAt     DateTime    @default(now())
  parkingSpot   ParkingSpot @relation(fields: [parkingSpotId], references: [id], onDelete: Cascade)
  @@index([parkingSpotId])
}

model ActiveRent {
  id            Int         @id @default(autoincrement())
  userId        String      @unique
  parkingSpotId Int         @unique
  hourlyRate    Float
  createdAt     DateTime    @default(now())
  parkingSpot   ParkingSpot @relation(fields: [parkingSpotId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([parkingSpotId])
}

model RentalHistory {
  id            Int      @id @default(autoincrement())
  userId        String
  parkingSpotId Int
  startDate     DateTime
  endDate       DateTime @default(now())
  totalCost     Float
  @@index([userId])
}
